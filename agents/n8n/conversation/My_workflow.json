{
  "name": "My workflow",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "data-engineering-agent",
        "responseMode": "responseNode",
        "options": {
          "responseHeaders": {
            "entries": [
              {
                "name": "Access-Control-Allow-Origin",
                "value": "*"
              }
            ]
          }
        }
      },
      "id": "ff4f00f2-424b-4717-a7d6-dc49e7411594",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        0,
        0
      ],
      "webhookId": "87f6c8c3-55de-4661-8fd9-2727490b076f"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "import json\nfrom datetime import datetime\n\n# Get all input items\nall_inputs = _input.all()\n\n# For debugging\nprint(\"DEBUG: All input items:\")\nprint(json.dumps(all_inputs, indent=2, default=str))\n\n# Process each item\nfor item in all_inputs:\n    # Try to get the webhook data from the item\n    data = item.json if hasattr(item, \"json\") else {}\n    \n    # Check if this is our webhook data\n    if \"selectedAgentIds\" in data and \"selectedStrategy\" in data and \"query\" in data:\n        # Extract the required fields\n        selected_agent_ids = data.get('selectedAgentIds', [])\n        selected_strategy = data.get('selectedStrategy', '')\n        query = data.get('query', '')\n\n        # Validate input\n        if not selected_agent_ids or not isinstance(selected_agent_ids, list) or len(selected_agent_ids) == 0:\n            item.json = {\n                'success': False,\n                'error': 'No agents selected',\n                'statusCode': 400\n            }\n            continue\n\n        if not query:\n            item.json = {\n                'success': False,\n                'error': 'Query is required',\n                'statusCode': 400\n            }\n            continue\n\n        # Map agent IDs to descriptions for context\n        agent_context = {\n            'data-architect': 'Expert in designing data infrastructure and systems',\n            'pipeline-engineer': 'Expert in building efficient data pipelines',\n            'data-analyst': 'Expert in analyzing and interpreting complex data',\n            'data-scientist': 'Expert in applying statistical models and machine learning',\n            'data-governance': 'Expert in ensuring data quality and compliance',\n            'data-engineer': 'Expert in building and maintaining data infrastructure'\n        }\n\n        # Build context for selected agents\n        selected_agents = [{\n            'id': agent_id,\n            'context': agent_context.get(agent_id, f\"Expert in {agent_id.replace('-', ' ')}\")\n        } for agent_id in selected_agent_ids]\n\n        # Get strategy description\n        strategy_description = 'Sequential conversation where each agent responds in turn.'\n        if selected_strategy == 'collaborative':\n            strategy_description = 'Collaborative approach where agents work together on the solution.'\n        elif selected_strategy == 'debate':\n            strategy_description = 'Debate format where agents may present different perspectives.'\n\n        # Update the item's json with our processed data\n        item.json = {\n            'selectedAgents': selected_agents,\n            'query': query,\n            'strategyDescription': strategy_description,\n            'timestamp': datetime.now().isoformat()\n        }\n\n# Return all processed items\nreturn all_inputs"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        220,
        0
      ],
      "id": "5909e8aa-ba3b-4113-8438-cf8dfbe2dcc0",
      "name": "Process Agent Request"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [
        300,
        -340
      ],
      "id": "34ff8d9b-79d5-4894-93aa-264b8d03177c",
      "name": "When chat message received",
      "webhookId": "b2f479b7-83af-4ddf-a494-621127b5f96c"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are a multi-agent data engineering system that simulates multiple expert agents collaborating together. Based on the selected agents, you'll provide comprehensive solutions that blend expertise from all selected specialists.\n\nCurrently, you are acting as these experts:\n{{ $json.body.selectedAgentIds }}\n\nFor your response:\n1. Structure your answer to clearly show which expert is providing which part of the solution\n2. Include practical implementation details and examples where appropriate\n3. Address scalability, reliability, and performance considerations\n4. If relevant, include sample architecture diagrams described in text format\n5. Provide configurations or flow diagram when they would be helpful\n\nRemember: Focus on providing actionable advice that directly addresses the query without any unnecessary introductions.\n\nUser Query: {{$node[\"Webhook\"].json.body.query}}\n\n",
        "messages": {
          "messageValues": [
            {
              "type": "HumanMessagePromptTemplate",
              "message": "** Please generate your response strictly in valid JSON format with exactly two keys: \"agentResponses\" and \"summary\". The \"agentResponses\" key should map to an array of objects. Each object must include exactly three keys: \"agentId\" (a string), \"agentName\" (a string), and \"content\" (a string containing the detailed response). The \"summary\" key should map to a string that briefly integrates all the perspectives from the \"agentResponses\". Do not include any additional text, explanations, or markdown formatting. Your entire output should be valid JSON that can be parsed directly by Python's json module.**"
            }
          ]
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.5,
      "position": [
        640,
        -220
      ],
      "id": "4a75ed98-e65a-4a4b-be75-972aeffc3fe4",
      "name": "Basic LLM Chain"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "o3-mini",
          "mode": "list",
          "cachedResultName": "o3-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        800,
        320
      ],
      "id": "b9e532c9-278d-47a3-bf8e-160a5128312f",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "q7i69LfyTfnVVNwV",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "import json\n\nall_inputs = _input.all()\noutput = []\n\nfor item in all_inputs:\n    # Get the JSON data from the item\n    data = item.json if hasattr(item, \"json\") else {}\n    \n    # If the data is coming as a string in the \"text\" field, decode it.\n    if \"text\" in data:\n        try:\n            data = json.loads(data[\"text\"])\n        except Exception as e:\n            raise Exception(\"Failed to parse JSON from the text field: \" + str(e))\n    \n    # Extract agentResponses and summary\n    agent_responses = data.get(\"agentResponses\", [])\n    summary = data.get(\"summary\", \"\")\n    \n    # Create an output item for each agent response\n    for agent in agent_responses:\n        output.append({\n            \"json\": {\n                \"agentId\": agent.get(\"agentId\", \"\"),\n                \"agentName\": agent.get(\"agentName\", \"\"),\n                \"content\": agent.get(\"content\", \"\")\n            }\n        })\n    \n    # Create a separate output item for the summary\n    output.append({\n        \"json\": {\n            \"summary\": summary\n        }\n    })\n\nreturn output"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1100,
        -120
      ],
      "id": "bee58dcb-cdd9-4ac5-a215-92c691c8d0c5",
      "name": "Code"
    },
    {
      "parameters": {
        "respondWith": "allIncomingItems",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        1760,
        60
      ],
      "id": "007f26bd-9fd9-413b-8bd1-f81ef056524f",
      "name": "Respond to Webhook"
    }
  ],
  "pinData": {
    "Webhook": [
      {
        "json": {
          "headers": {
            "host": "localhost:5678",
            "user-agent": "curl/8.7.1",
            "accept": "*/*",
            "content-type": "application/json",
            "content-length": "186"
          },
          "params": {},
          "query": {},
          "body": {
            "selectedAgentIds": [
              "data-architect",
              "data-engineer"
            ],
            "selectedStrategy": "collaborative",
            "query": "How to design a scalable data pipeline for real-time analytics?"
          },
          "webhookUrl": "http://localhost:5678/webhook/data-engineering-agent",
          "executionMode": "production"
        }
      }
    ]
  },
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Process Agent Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Agent Request": {
      "main": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "When chat message received": {
      "main": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Chain": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Respond to Webhook": {
      "main": [
        []
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "68708c81-543f-4268-9f78-1a11c21a5c60",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "a88b798ef01b26ab406cd684d356b1bd6135bf0400739bb1e06068830ab851b9"
  },
  "id": "oxWfU2L4T3hM38DD",
  "tags": []
}